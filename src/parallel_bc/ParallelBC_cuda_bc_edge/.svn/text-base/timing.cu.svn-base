#include <cutil.h>
#define TIMING

/*	startTimer
 *
 *	timer - id of timer
 *
 *	Creates a new timer from the parameter.
 *	Starts the timer.
 */

void startTimer(unsigned int &timer) {
	#ifdef TIMING
	CUT_SAFE_CALL(cutCreateTimer(&timer));
	CUDA_SAFE_CALL( cudaThreadSynchronize() );
	cutStartTimer(timer);
	#endif
}


/*	endTimer
 *
 *	timer - id of previously started timer.
 *
 *	Waits for device to finish computing
 *	and then stops the timer.  Returns the 
 *	duration of the timer.
 */

float endTimer(unsigned int &timer) {
	float device_time = 0;

	#ifdef TIMING
	CUDA_SAFE_CALL( cudaThreadSynchronize() );
	cutStopTimer(timer);
	 device_time = cutGetTimerValue(timer);
	CUT_SAFE_CALL(cutDeleteTimer(timer));
	#endif

	return device_time;
}


